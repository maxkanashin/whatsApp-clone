{"version":3,"sources":["constants.js","reducer/activeId.js","reducer/usersList.js","reducer/chatList.js","reducer/index.js","store/preloadedState.js","store/index.js","components/shared/DropdownMenu.js","components/shared/DropdownMenuItem.js","components/shared/ChatListItem.js","components/Profile.js","components/Sidebar.js","AC/activeIdAction.js","components/ChatInfoWindow.js","components/shared/MessageBox.js","components/ChatWindow.js","AC/chatListAction.js","App.js","index.js"],"names":["SET_ACTIVE_ID","SET_MESSAGE","MY_UUID","activeId","action","type","payload","UsersListModel","Record","id","imgAvatar","userName","message","DefaultReducerState","entities","OrderedMap","usersList","ChatListModel","userId","messages","MessagesListModel","author","date","chatList","chat","find","obj","get","messageList","setIn","combineReducers","odata","usersListMap","DefaultUsersListState","messagesListMap","DefaultMessagesListState","i","uuid","faker","name","findName","image","people","j","Math","floor","random","lorem","sentence","set","e","console","log","store","createStore","reducer","preloadedState","window","__REDUX_DEVTOOLS_EXTENSION__","DropdownMenu","props","wrapperRef","useRef","handleClickOutside","event","current","contains","target","setIsOpen","useEffect","document","addEventListener","removeEventListener","CSSTransition","in","isOpen","timeout","classNames","unmountOnExit","onEnter","onExited","ref","className","children","DropdownMenuItem","ChatListItem","user","lastMessage","active","onClick","useState","Avatar","src","IconButton","Profile","unMount","setUnMount","setTimeout","Sidebar","dispatch","useDispatch","isProfileOpen","setIsProfileOpen","useSelector","state","fontSize","color","placeholder","valueSeq","map","item","length","setActiveId","ChatInfoWindow","href","rel","MessageBox","ChatWindow","messagesEndRef","input","setInput","emojiIsOpen","setEmojiIsOpen","messagesList","getIn","handleClickSend","preventDefault","Date","setMessage","getHours","getMinutes","slice","scrollIntoView","index","showPreview","showSkinTones","emojiSize","onSelect","emoji","native","style","TextareaAutosize","rowsMax","value","onChange","onKeyPress","which","ctrlKey","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.93a97f4b.chunk.js","sourcesContent":["export const SET_ACTIVE_ID = 'SET_ACTIVE_ID'\r\nexport const SET_MESSAGE = 'SET_MESSAGE'\r\n\r\nexport const MY_UUID = 'a30eb4c-6c8a-b0d-7ddb-8bbcd13b20e'\r\n","import { SET_ACTIVE_ID } from '../constants'\r\n\r\nconst activeId = (activeId = null, action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    case SET_ACTIVE_ID:\r\n      return payload.activeId\r\n    default:\r\n      return activeId\r\n  }\r\n}\r\n\r\nexport default activeId\r\n","import { OrderedMap, Record } from 'immutable'\r\n\r\nexport const UsersListModel = Record({\r\n  id: null,\r\n  imgAvatar: '',\r\n  userName: '',\r\n  message:\r\n    'Lorem ipsum dolor sit amet consectetur adipisicing elit. Placeat, fugit!'\r\n})\r\n\r\nexport const DefaultReducerState = Record({\r\n  entities: OrderedMap({})\r\n})\r\n\r\nconst usersList = (usersList = new DefaultReducerState(), action) => {\r\n  return usersList\r\n}\r\n\r\nexport default usersList\r\n","import { OrderedMap, Record } from 'immutable'\r\nimport { SET_MESSAGE, MY_UUID } from '../constants'\r\n\r\nexport const ChatListModel = Record({\r\n  id: null,\r\n  userId: null,\r\n  messages: OrderedMap({})\r\n})\r\n\r\nexport const MessagesListModel = Record({\r\n  author: '',\r\n  date: '',\r\n  message: ''\r\n})\r\n\r\nexport const DefaultReducerState = Record({\r\n  entities: OrderedMap({})\r\n})\r\n\r\nconst chatList = (chatList = new DefaultReducerState(), action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      const chat = chatList.entities.find(\r\n        (obj) => obj.get('userId') === payload.userId\r\n      )\r\n      let messageList = new MessagesListModel({\r\n        author: MY_UUID,\r\n        date: payload.date,\r\n        message: payload.message\r\n      })\r\n      return chatList.setIn(\r\n        ['entities', chat.id, 'messages'],\r\n        [...chat.messages, messageList]\r\n      )\r\n    default:\r\n      return chatList\r\n  }\r\n}\r\n\r\nexport default chatList\r\n","import { combineReducers } from 'redux'\r\nimport activeId from './activeId'\r\nimport usersList from './usersList'\r\nimport chatList from './chatList'\r\n\r\nexport default combineReducers({ activeId, usersList, chatList })\r\n","import * as fs from 'fs'\r\nimport uuid from 'react-uuid'\r\nimport faker from 'faker'\r\nimport {\r\n  DefaultReducerState as DefaultUsersListState,\r\n  UsersListModel\r\n} from '../reducer/usersList'\r\nimport {\r\n  DefaultReducerState as DefaultMessagesListState,\r\n  ChatListModel,\r\n  MessagesListModel\r\n} from '../reducer/chatList.js'\r\nimport { MY_UUID } from '../constants'\r\n\r\nlet odata = {}\r\n\r\ntry {\r\n  let usersListMap = new DefaultUsersListState()\r\n  let messagesListMap = new DefaultMessagesListState()\r\n\r\n  for (let i = 0; i < 15; i++) {\r\n    let usersList = new UsersListModel({\r\n      id: uuid(),\r\n      userName: faker.name.findName(),\r\n      imgAvatar: `${faker.image.people()}?random=${i + 10}`\r\n    })\r\n    usersListMap = usersListMap.setIn(['entities', usersList.id], usersList)\r\n\r\n    let chatList = new ChatListModel({\r\n      id: uuid(),\r\n      userId: usersList.id\r\n    })\r\n    for (let j = 0; j < 20; j++) {\r\n      let messages = new MessagesListModel({\r\n        author:\r\n          Math.floor(Math.random() * Math.floor(2)) === 1\r\n            ? usersList.id\r\n            : MY_UUID,\r\n        date: '22:44',\r\n        message: faker.lorem.sentence(5)\r\n      })\r\n      chatList = chatList.set('messages', [...chatList.messages, messages])\r\n    }\r\n    messagesListMap = messagesListMap.setIn(['entities', chatList.id], chatList)\r\n  }\r\n  odata.usersList = usersListMap\r\n  odata.chatList = messagesListMap\r\n} catch (e) {\r\n  console.log('error', e)\r\n  odata = {}\r\n}\r\n\r\nexport default odata\r\n","import { createStore } from 'redux'\r\nimport reducer from '../reducer/index'\r\nimport preloadedState from './preloadedState'\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  preloadedState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nexport default store\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport './DropdownMenu.css'\r\n\r\nfunction DropdownMenu(props) {\r\n  const wrapperRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  })\r\n\r\n  function handleClickOutside(event) {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n      props.setIsOpen(false)\r\n    }\r\n  }\r\n  return (\r\n    <CSSTransition\r\n      in={props.isOpen}\r\n      timeout={200}\r\n      classNames=\"menu\"\r\n      unmountOnExit\r\n      onEnter={() => props.setIsOpen(true)}\r\n      onExited={() => props.setIsOpen(false)}\r\n    >\r\n      <div ref={wrapperRef} className=\"dropdown-menu\">\r\n        <ul>{props.children}</ul>\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default DropdownMenu\r\n","import React from 'react'\r\nimport './DropdownMenuItem.css'\r\n\r\nfunction DropdownMenuItem(props) {\r\n  return (\r\n    <li className=\"dropdown-menu-item\">\r\n      <div>{props.children}</div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default DropdownMenuItem\r\n","import React, { useState } from 'react'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport DropdownMenu from './DropdownMenu'\r\nimport DropdownMenuItem from './DropdownMenuItem'\r\nimport './ChatListItem.css'\r\n\r\nconst ChatListItem = ({ user, lastMessage, active, onClick }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  return (\r\n    <div className={`ChatListItem${active ? ' active' : ''}`} onClick={onClick}>\r\n      <div className=\"ChatListItem--avatar\">\r\n        <Avatar src={user.imgAvatar} />\r\n      </div>\r\n      <div className=\"ChatListItem--container\">\r\n        <div className=\"ChatListItem--container--line\">\r\n          <div className=\"ChatListItem--user\">{user.userName}</div>\r\n          <div className=\"ChatListItem--data\">{lastMessage.date}</div>\r\n        </div>\r\n        <div className=\"ChatListItem--container--line\">\r\n          <div className=\"ChatListItem--message\">\r\n            <p>{lastMessage.message}</p>\r\n          </div>\r\n          <div className=\"container--line-btn\">\r\n            <IconButton onClick={() => setIsOpen(!isOpen)}>\r\n              <ExpandMoreIcon />\r\n            </IconButton>\r\n            <DropdownMenu isOpen={isOpen} setIsOpen={setIsOpen}>\r\n              <DropdownMenuItem>В архив</DropdownMenuItem>\r\n              <DropdownMenuItem>Без звука</DropdownMenuItem>\r\n              <DropdownMenuItem>Удалить чат</DropdownMenuItem>\r\n              <DropdownMenuItem>Закрепить чат</DropdownMenuItem>\r\n              <DropdownMenuItem>Пометить как непрочитанное</DropdownMenuItem>\r\n            </DropdownMenu>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatListItem\r\n","import React, { useState } from 'react'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\r\nimport './Profile.css'\r\n\r\nconst Profile = ({ isOpen, setIsOpen }) => {\r\n  const [unMount, setUnMount] = useState(true)\r\n  if (unMount && isOpen) {\r\n    setTimeout(() => {\r\n      setUnMount(false)\r\n    })\r\n  } else if (unMount) {\r\n    return null\r\n  }\r\n\r\n  function HandleClick(e) {\r\n    setIsOpen(false)\r\n    setTimeout(() => {\r\n      setUnMount(true)\r\n    }, 500)\r\n  }\r\n\r\n  return (\r\n    <div className={`profile${isOpen && !unMount ? '' : ' hidden'}`}>\r\n      <header>\r\n        <div className=\"profile--header\">\r\n          <div className=\"header--content\">\r\n            <IconButton onClick={HandleClick}>\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n            <div className=\"header--content--text\">Профиль</div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <div className=\"profile--body\">\r\n        <div className=\"profile--body--avatar\">\r\n          <Avatar />\r\n        </div>\r\n        <div className=\"profile--body--container\">\r\n          <div className=\"body--label\">Ваше имя</div>\r\n          <div className=\"body--inputField\">\r\n            <div className=\"inputField--input\">\r\n              <input type=\"text\" />\r\n            </div>\r\n            <div className=\"inputField--btn\">\r\n              <IconButton>\r\n                <CreateIcon />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"profile--body--warning\">\r\n          Это не имя пользователя или пароль. Данное имя будут видеть ваши\r\n          контакты в WhatsApp.\r\n        </div>\r\n        <div className=\"profile--body--container\">\r\n          <div className=\"body--label\">Сведения</div>\r\n          <div className=\"body--inputField\">\r\n            <div className=\"inputField--input\">\r\n              <input type=\"text\" />\r\n            </div>\r\n            <div className=\"inputField--btn\">\r\n              <IconButton>\r\n                <CreateIcon />\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setActiveId } from '../AC/activeIdAction'\r\nimport ChatListItem from './shared/ChatListItem'\r\nimport DropdownMenu from './shared/DropdownMenu'\r\nimport DropdownMenuItem from './shared/DropdownMenuItem'\r\nimport Profile from './Profile'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge'\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport './Sidebar.css'\r\n\r\nconst Sidebar = () => {\r\n  const dispatch = useDispatch()\r\n  const [isProfileOpen, setIsProfileOpen] = useState(false)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const activeId = useSelector((state) => state.activeId)\r\n  const usersList = useSelector((state) => state.usersList.entities)\r\n  const chatList = useSelector((state) => state.chatList.entities)\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"main_sidebar\">\r\n        <div className=\"main_sidebar--header\">\r\n          <Avatar onClick={() => setIsProfileOpen(true)} />\r\n          <div className=\"main_sidebar--header--buttons\">\r\n            <div className=\"header--btn\">\r\n              <IconButton>\r\n                <DonutLargeIcon />\r\n              </IconButton>\r\n            </div>\r\n\r\n            <div className=\"header--btn\">\r\n              <IconButton>\r\n                <ChatIcon />\r\n              </IconButton>\r\n            </div>\r\n\r\n            <div className=\"header--btn\">\r\n              <IconButton onClick={() => setIsOpen(!isOpen)}>\r\n                <MoreVertIcon />\r\n              </IconButton>\r\n              <DropdownMenu isOpen={isOpen} setIsOpen={setIsOpen}>\r\n                <DropdownMenuItem>Новая группа</DropdownMenuItem>\r\n                <DropdownMenuItem>Создать комнату</DropdownMenuItem>\r\n                <DropdownMenuItem>Профиль</DropdownMenuItem>\r\n                <DropdownMenuItem>Архив</DropdownMenuItem>\r\n                <DropdownMenuItem>Избранные</DropdownMenuItem>\r\n                <DropdownMenuItem>Настройки</DropdownMenuItem>\r\n                <DropdownMenuItem>Выйти</DropdownMenuItem>\r\n              </DropdownMenu>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"main_sidebar--search\">\r\n          <div className=\"search--container\">\r\n            <SearchIcon fontSize=\"small\" color=\"disabled\" />\r\n            <input placeholder=\"Поиск или новый чат\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"main_sidebar--userList\">\r\n          {chatList.valueSeq().map((item, i) => {\r\n            const user = usersList.find((obj) => obj.get('id') === item.userId)\r\n            return (\r\n              <ChatListItem\r\n                user={user}\r\n                lastMessage={item.messages[item.messages.length - 1]}\r\n                key={i}\r\n                active={user.id === activeId}\r\n                onClick={() => dispatch(setActiveId(user.id))}\r\n              />\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      <Profile isOpen={isProfileOpen} setIsOpen={setIsProfileOpen} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","import { SET_ACTIVE_ID } from '../constants'\r\n\r\nexport function setActiveId(activeId) {\r\n  return {\r\n    type: SET_ACTIVE_ID,\r\n    payload: { activeId }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport LaptopWindowsIcon from '@material-ui/icons/LaptopWindows'\r\nimport './ChatInfoWindow.css'\r\n\r\nfunction ChatInfoWindow() {\r\n  return (\r\n    <div className=\"ChatInfoWindow\">\r\n      <div className=\"ChatInfoWindow--content\">\r\n        <div className=\"ChatInfoWindow--content--img\" />\r\n        <h1>Не отключайте свой телефон</h1>\r\n        <div className=\"ChatInfoWindow--text\">\r\n          WhatsApp подключается к вашему телефону, чтобы синхронизировать\r\n          сообщения. Чтобы снизить трафик данных, подключите телефон к Wi-Fi.\r\n        </div>\r\n        <div className=\"ChatInfoWindow--link\">\r\n          <LaptopWindowsIcon />\r\n          <div>\r\n            WhatsApp доступен для Windows.{' '}\r\n            <a\r\n              href=\"https://www.whatsapp.com/download\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Скачайте здесь\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatInfoWindow\r\n","import React, { useState } from 'react'\r\nimport { IconButton } from '@material-ui/core'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport { MY_UUID } from '../../constants'\r\nimport DropdownMenu from './DropdownMenu'\r\nimport DropdownMenuItem from './DropdownMenuItem'\r\nimport './MessageBox.css'\r\n\r\nfunction MessageBox({ message }) {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  return (\r\n    <div className=\"messageBox--line\">\r\n      <div\r\n        className={`messageBox--line--container${\r\n          message.author === MY_UUID ? ` out` : ``\r\n        }`}\r\n      >\r\n        <div className=\"container--wrapper\">\r\n          <div className=\"container--wrapper--message\">{message.message}</div>\r\n          <div className=\"container--wrapper--time\">{message.date}</div>\r\n        </div>\r\n        <div className=\"container--btn\">\r\n          <IconButton onClick={() => setIsOpen(!isOpen)}>\r\n            <ExpandMoreIcon />\r\n          </IconButton>\r\n          <DropdownMenu isOpen={isOpen} setIsOpen={setIsOpen}>\r\n            <DropdownMenuItem>Данные о сообщении</DropdownMenuItem>\r\n            <DropdownMenuItem>Ответить</DropdownMenuItem>\r\n            <DropdownMenuItem>Переслать сообщение</DropdownMenuItem>\r\n            <DropdownMenuItem>Добавить сообщение в Избранные</DropdownMenuItem>\r\n            <DropdownMenuItem>Удалить сообщение</DropdownMenuItem>\r\n          </DropdownMenu>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageBox\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setMessage } from '../AC/chatListAction'\r\nimport { Avatar, IconButton, TextareaAutosize } from '@material-ui/core'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport NoteIcon from '@material-ui/icons/Note'\r\nimport MessageBox from './shared/MessageBox'\r\nimport { Picker } from 'emoji-mart'\r\nimport DropdownMenu from './shared/DropdownMenu'\r\nimport DropdownMenuItem from './shared/DropdownMenuItem'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport './ChatWindow.css'\r\n\r\nconst ChatWindow = () => {\r\n  const messagesEndRef = useRef(null)\r\n  const [input, setInput] = useState('')\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [emojiIsOpen, setEmojiIsOpen] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const activeId = useSelector((state) => state.activeId)\r\n  const chatList = useSelector((state) => state.chatList.entities)\r\n  const messagesList = chatList.find((obj) => obj.get('userId') === activeId)\r\n\r\n  const user = useSelector((state) =>\r\n    state.usersList.getIn(['entities', activeId])\r\n  )\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView()\r\n  }\r\n\r\n  function handleClickKey(e) {\r\n    if (e.which === 13 && e.ctrlKey) {\r\n      setInput(e.target.value + '\\n')\r\n    } else if (e.which === 13) {\r\n      handleClickSend(e)\r\n    }\r\n  }\r\n\r\n  function handleClickSend(e) {\r\n    e.preventDefault()\r\n    if (input.length > 0) {\r\n      var date = new Date()\r\n      dispatch(\r\n        setMessage(\r\n          input,\r\n          activeId,\r\n          date.getHours() + ':' + ('0' + date.getMinutes()).slice(-2)\r\n        )\r\n      )\r\n      setInput('')\r\n    }\r\n  }\r\n\r\n  function handleClickEmojiOpen(e) {\r\n    e.preventDefault()\r\n    if (!emojiIsOpen) setEmojiIsOpen(true)\r\n  }\r\n\r\n  function handleClickClose(e) {\r\n    e.preventDefault()\r\n    setEmojiIsOpen(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    scrollToBottom()\r\n  })\r\n\r\n  return (\r\n    <div className=\"chatWindow\">\r\n      <header className=\"chatWindow--header\">\r\n        <div className=\"header--avatar\">\r\n          <Avatar src={user.imgAvatar} />\r\n        </div>\r\n        <div className=\"header--container\">\r\n          <div className=\"header--container--name\">{user.userName}</div>\r\n          <div className=\"header--container--date\">Был в сети вчера</div>\r\n        </div>\r\n        <div className=\"header--buttons\">\r\n          <div className=\"header--btn\">\r\n            <IconButton>\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </div>\r\n          <div className=\"header--btn\">\r\n            <IconButton onClick={() => setIsOpen(!isOpen)}>\r\n              <MoreVertIcon />\r\n            </IconButton>\r\n            <DropdownMenu isOpen={isOpen} setIsOpen={setIsOpen}>\r\n              <DropdownMenuItem>Данные контакта</DropdownMenuItem>\r\n              <DropdownMenuItem>Выбрать сообщения</DropdownMenuItem>\r\n              <DropdownMenuItem>Без звука</DropdownMenuItem>\r\n              <DropdownMenuItem>Очистить чат</DropdownMenuItem>\r\n              <DropdownMenuItem>Удалить чат</DropdownMenuItem>\r\n            </DropdownMenu>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"chatWindow--messageWindow\">\r\n        {messagesList.get('messages').map((item, index) => (\r\n          <MessageBox message={item} key={index} />\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className={`chatWindow--emojiField${!emojiIsOpen ? ' hidden' : ''}`}>\r\n        <Picker\r\n          showPreview={false}\r\n          showSkinTones={false}\r\n          emojiSize={32}\r\n          onSelect={(emoji) => setInput(input + emoji.native)}\r\n        />\r\n      </div>\r\n\r\n      <footer className=\"chatWindow--footer\">\r\n        <div className=\"footer--buttons\">\r\n          <IconButton\r\n            className={`${!emojiIsOpen ? 'hidden' : ''}`}\r\n            onClick={handleClickClose}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n\r\n          <IconButton onClick={handleClickEmojiOpen}>\r\n            <InsertEmoticonIcon\r\n              style={{ color: emojiIsOpen ? '#009688' : '#919191' }}\r\n            />\r\n          </IconButton>\r\n\r\n          <IconButton className={`${!emojiIsOpen ? 'hidden' : ''}`}>\r\n            <GifIcon />\r\n          </IconButton>\r\n\r\n          <IconButton className={`${!emojiIsOpen ? 'hidden' : ''}`}>\r\n            <NoteIcon />\r\n          </IconButton>\r\n\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n        </div>\r\n        <div className=\"footer--inputField\">\r\n          <TextareaAutosize\r\n            rowsMax={5}\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n            placeholder=\"Введите сообщение\"\r\n            onKeyPress={handleClickKey}\r\n          ></TextareaAutosize>\r\n        </div>\r\n        <div className=\"footer--sendButton\">\r\n          {input.length > 0 ? (\r\n            <IconButton onClick={handleClickSend}>\r\n              <SendIcon />\r\n            </IconButton>\r\n          ) : (\r\n            <IconButton>\r\n              <MicIcon />\r\n            </IconButton>\r\n          )}\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatWindow\r\n","import { SET_MESSAGE } from '../constants'\r\n\r\nexport function setMessage(message, userId, date) {\r\n  return {\r\n    type: SET_MESSAGE,\r\n    payload: { message, userId, date }\r\n  }\r\n}\r\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Sidebar from './components/Sidebar'\nimport ChatInfoWindow from './components/ChatInfoWindow'\nimport ChatWindow from './components/ChatWindow'\nimport './App.css'\n\nfunction App() {\n  const activeId = useSelector((state) => state.activeId)\n  return (\n    <div className=\"App\">\n      <div className=\"App--wrapper\">\n        <div className=\"App--body\">\n          <Sidebar />\n          {activeId == null ? <ChatInfoWindow /> : <ChatWindow />}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}