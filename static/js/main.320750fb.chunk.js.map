{"version":3,"sources":["constants.js","reducer/activeId.js","reducer/usersList.js","reducer/chatList.js","reducer/openContact.js","reducer/index.js","store/preloadedState.js","store/index.js","components/shared/DropdownMenu.js","components/shared/DropdownMenuItem.js","components/shared/ChatListItem.js","components/Profile.js","components/Sidebar.js","AC/activeIdAction.js","components/ChatInfoWindow.js","AC/openContactAction.js","components/shared/MessageBox.js","components/ChatWindow.js","AC/chatListAction.js","components/AboutContact.js","components/MainWindow.js","App.js","index.js"],"names":["SET_ACTIVE_ID","SET_MESSAGE","OPEN_ABOUT_CONTACT","CLOSE_ABOUT_CONTACT","MY_UUID","activeId","action","type","payload","UsersListModel","Record","id","imgAvatar","userName","online","phoneNum","DefaultReducerState","entities","OrderedMap","usersList","ChatListModel","userId","messages","MessagesListModel","author","date","message","chatList","chat","find","obj","get","messageList","setIn","openContact","combineReducers","odata","usersListMap","DefaultUsersListState","messagesListMap","DefaultMessagesListState","i","uuid","faker","name","findName","image","people","phone","phoneNumberFormat","j","Math","floor","random","lorem","sentence","set","e","console","log","store","createStore","reducer","preloadedState","window","__REDUX_DEVTOOLS_EXTENSION__","DropdownMenu","props","wrapperRef","useRef","handleClickOutside","event","current","contains","target","setIsOpen","useEffect","document","addEventListener","removeEventListener","CSSTransition","in","isOpen","timeout","classNames","unmountOnExit","onEnter","onExited","ref","className","onClick","children","DropdownMenuItem","ChatListItem","user","lastMessage","active","useState","Avatar","src","IconButton","Profile","unMount","setUnMount","isDisableName","setIsDisableName","inputName","setInputName","isDisableInfo","setIsDisableInfo","inputInfo","setInputInfo","setTimeout","value","onChange","disabled","Sidebar","dispatch","useDispatch","isProfileOpen","setIsProfileOpen","filter","setFilter","useSelector","state","item","toLowerCase","indexOf","fontSize","color","placeholder","valueSeq","map","length","setActiveId","ChatInfoWindow","href","rel","openAboutContact","closeAboutContact","MessageBox","ChatWindow","messagesEndRef","input","setInput","isOpenMenu","setIsOpenMenu","emojiIsOpen","setEmojiIsOpen","messagesList","getIn","handleClickSend","preventDefault","Date","setMessage","getHours","getMinutes","slice","scrollIntoView","index","showPreview","showSkinTones","emojiSize","onSelect","emoji","native","style","TextareaAutosize","rowsMax","onKeyPress","which","ctrlKey","AboutContact","Checkbox","borderTop","borderBottom","MainWindow","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.320750fb.chunk.js","sourcesContent":["export const SET_ACTIVE_ID = 'SET_ACTIVE_ID'\r\nexport const SET_MESSAGE = 'SET_MESSAGE'\r\nexport const OPEN_ABOUT_CONTACT = 'OPEN_ABOUT_CONTACT'\r\nexport const CLOSE_ABOUT_CONTACT = 'CLOSE_ABOUT_CONTACT'\r\n\r\nexport const MY_UUID = 'a30eb4c-6c8a-b0d-7ddb-8bbcd13b20e'\r\n","import { SET_ACTIVE_ID } from '../constants'\r\n\r\nconst activeId = (activeId = null, action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    case SET_ACTIVE_ID:\r\n      return payload.activeId\r\n    default:\r\n      return activeId\r\n  }\r\n}\r\n\r\nexport default activeId\r\n","import { OrderedMap, Record } from 'immutable'\r\n\r\nexport const UsersListModel = Record({\r\n  id: null,\r\n  imgAvatar: '',\r\n  userName: '',\r\n  online: 'Был(-а) сегодня в 00:01',\r\n  phoneNum: ''\r\n})\r\n\r\nexport const DefaultReducerState = Record({\r\n  entities: OrderedMap({})\r\n})\r\n\r\nconst usersList = (usersList = new DefaultReducerState(), action) => {\r\n  return usersList\r\n}\r\n\r\nexport default usersList\r\n","import { OrderedMap, Record } from 'immutable'\r\nimport { SET_MESSAGE, MY_UUID } from '../constants'\r\n\r\nexport const ChatListModel = Record({\r\n  id: null,\r\n  userId: null,\r\n  messages: OrderedMap({})\r\n})\r\n\r\nexport const MessagesListModel = Record({\r\n  author: '',\r\n  date: '',\r\n  message: ''\r\n})\r\n\r\nexport const DefaultReducerState = Record({\r\n  entities: OrderedMap({})\r\n})\r\n\r\nconst chatList = (chatList = new DefaultReducerState(), action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      const chat = chatList.entities.find(\r\n        (obj) => obj.get('userId') === payload.userId\r\n      )\r\n      let messageList = new MessagesListModel({\r\n        author: MY_UUID,\r\n        date: payload.date,\r\n        message: payload.message\r\n      })\r\n      return chatList.setIn(\r\n        ['entities', chat.id, 'messages'],\r\n        [...chat.messages, messageList]\r\n      )\r\n    default:\r\n      return chatList\r\n  }\r\n}\r\n\r\nexport default chatList\r\n","import {\r\n  OPEN_ABOUT_CONTACT,\r\n  CLOSE_ABOUT_CONTACT,\r\n  SET_ACTIVE_ID\r\n} from '../constants'\r\n\r\nconst openContact = (openContact = false, action) => {\r\n  const { type, payload } = action\r\n\r\n  switch (type) {\r\n    case OPEN_ABOUT_CONTACT:\r\n    case CLOSE_ABOUT_CONTACT:\r\n      return payload.openContact\r\n    case SET_ACTIVE_ID:\r\n      return false\r\n    default:\r\n      return openContact\r\n  }\r\n}\r\n\r\nexport default openContact\r\n","import { combineReducers } from 'redux'\r\nimport activeId from './activeId'\r\nimport usersList from './usersList'\r\nimport chatList from './chatList'\r\nimport openContact from './openContact'\r\n\r\nexport default combineReducers({ activeId, openContact, usersList, chatList })\r\n","import uuid from 'react-uuid'\r\nimport faker from 'faker'\r\nimport {\r\n  DefaultReducerState as DefaultUsersListState,\r\n  UsersListModel\r\n} from '../reducer/usersList'\r\nimport {\r\n  DefaultReducerState as DefaultMessagesListState,\r\n  ChatListModel,\r\n  MessagesListModel\r\n} from '../reducer/chatList.js'\r\nimport { MY_UUID } from '../constants'\r\n\r\nlet odata = {}\r\n\r\ntry {\r\n  let usersListMap = new DefaultUsersListState()\r\n  let messagesListMap = new DefaultMessagesListState()\r\n\r\n  for (let i = 0; i < 15; i++) {\r\n    let usersList = new UsersListModel({\r\n      id: uuid(),\r\n      userName: faker.name.findName(),\r\n      imgAvatar: `${faker.image.people()}?random=${i + 10}`,\r\n      phoneNum: faker.phone.phoneNumberFormat(2)\r\n    })\r\n    usersListMap = usersListMap.setIn(['entities', usersList.id], usersList)\r\n\r\n    let chatList = new ChatListModel({\r\n      id: uuid(),\r\n      userId: usersList.id\r\n    })\r\n    for (let j = 0; j < 20; j++) {\r\n      let messages = new MessagesListModel({\r\n        author:\r\n          Math.floor(Math.random() * Math.floor(2)) === 1\r\n            ? usersList.id\r\n            : MY_UUID,\r\n        date: '00:34',\r\n        message: faker.lorem.sentence(5)\r\n      })\r\n      chatList = chatList.set('messages', [...chatList.messages, messages])\r\n    }\r\n    messagesListMap = messagesListMap.setIn(['entities', chatList.id], chatList)\r\n  }\r\n  odata.usersList = usersListMap\r\n  odata.chatList = messagesListMap\r\n} catch (e) {\r\n  console.log('error', e)\r\n  odata = {}\r\n}\r\n\r\nexport default odata\r\n","import { createStore } from 'redux'\r\nimport reducer from '../reducer/index'\r\nimport preloadedState from './preloadedState'\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  preloadedState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)\r\n\r\nexport default store\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport './DropdownMenu.css'\r\n\r\nfunction DropdownMenu(props) {\r\n  const wrapperRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClickOutside)\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside)\r\n    }\r\n  })\r\n\r\n  function handleClickOutside(event) {\r\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n      props.setIsOpen(false)\r\n    }\r\n  }\r\n  return (\r\n    <CSSTransition\r\n      in={props.isOpen}\r\n      timeout={200}\r\n      classNames=\"menu\"\r\n      unmountOnExit\r\n      onEnter={() => props.setIsOpen(true)}\r\n      onExited={() => props.setIsOpen(false)}\r\n    >\r\n      <div ref={wrapperRef} className=\"dropdown-menu\" onClick={props.onClick}>\r\n        <ul>{props.children}</ul>\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default DropdownMenu\r\n","import React from 'react'\r\nimport './DropdownMenuItem.css'\r\n\r\nfunction DropdownMenuItem(props) {\r\n  return (\r\n    <li className=\"dropdown-menu-item\" onClick={props.onClick}>\r\n      <div>{props.children}</div>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default DropdownMenuItem\r\n","import React, { useState } from 'react'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport DropdownMenu from './DropdownMenu'\r\nimport DropdownMenuItem from './DropdownMenuItem'\r\nimport './ChatListItem.css'\r\n\r\nconst ChatListItem = ({ user, lastMessage, active, onClick }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  return (\r\n    <div className={`ChatListItem${active ? ' active' : ''}`} onClick={onClick}>\r\n      <div className=\"ChatListItem--avatar\">\r\n        <Avatar src={user.imgAvatar} />\r\n      </div>\r\n      <div className=\"ChatListItem--container\">\r\n        <div className=\"ChatListItem--container--line\">\r\n          <div className=\"ChatListItem--user\">{user.userName}</div>\r\n          <div className=\"ChatListItem--data\">{lastMessage.date}</div>\r\n        </div>\r\n        <div className=\"ChatListItem--container--line\">\r\n          <div className=\"ChatListItem--message\">\r\n            <p>{lastMessage.message}</p>\r\n          </div>\r\n          <div className=\"container--line-btn\">\r\n            <IconButton onClick={() => setIsOpen(!isOpen)}>\r\n              <ExpandMoreIcon />\r\n            </IconButton>\r\n            <DropdownMenu isOpen={isOpen} setIsOpen={setIsOpen}>\r\n              <DropdownMenuItem>В архив</DropdownMenuItem>\r\n              <DropdownMenuItem>Без звука</DropdownMenuItem>\r\n              <DropdownMenuItem>Удалить чат</DropdownMenuItem>\r\n              <DropdownMenuItem>Закрепить чат</DropdownMenuItem>\r\n              <DropdownMenuItem>Пометить как непрочитанное</DropdownMenuItem>\r\n            </DropdownMenu>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatListItem\r\n","import React, { useState } from 'react'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\r\nimport CheckIcon from '@material-ui/icons/Check'\r\nimport './Profile.css'\r\n\r\nconst Profile = ({ isOpen, setIsOpen }) => {\r\n  const [unMount, setUnMount] = useState(true)\r\n  const [isDisableName, setIsDisableName] = useState(false)\r\n  const [inputName, setInputName] = useState('User Name')\r\n  const [isDisableInfo, setIsDisableInfo] = useState(false)\r\n  const [inputInfo, setInputInfo] = useState('Hey there! I am using WhatsApp.')\r\n  if (unMount && isOpen) {\r\n    setTimeout(() => {\r\n      setUnMount(false)\r\n    })\r\n  } else if (unMount) {\r\n    return null\r\n  }\r\n\r\n  function HandleClick(e) {\r\n    setIsOpen(false)\r\n    setTimeout(() => {\r\n      setUnMount(true)\r\n    }, 500)\r\n  }\r\n\r\n  return (\r\n    <div className={`profile${isOpen && !unMount ? '' : ' hidden'}`}>\r\n      <header>\r\n        <div className=\"profile--header\">\r\n          <div className=\"header--content\">\r\n            <IconButton onClick={HandleClick}>\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n            <div className=\"header--content--text\">Профиль</div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <div className=\"profile--body\">\r\n        <div className=\"profile--body--avatar\">\r\n          <Avatar />\r\n        </div>\r\n        <div className=\"profile--body--container\">\r\n          <div className=\"body--label\">Ваше имя</div>\r\n          <div className={`body--inputField${isDisableName ? ' active' : ''}`}>\r\n            <div className=\"inputField--input\">\r\n              <input\r\n                type=\"text\"\r\n                value={inputName}\r\n                onChange={(e) => setInputName(e.target.value)}\r\n                disabled={!isDisableName}\r\n              />\r\n            </div>\r\n            <div className=\"inputField--btn\">\r\n              <IconButton onClick={() => setIsDisableName(!isDisableName)}>\r\n                {isDisableName ? <CheckIcon /> : <CreateIcon />}\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"profile--body--warning\">\r\n          Это не имя пользователя или пароль. Данное имя будут видеть ваши\r\n          контакты в WhatsApp.\r\n        </div>\r\n        <div className=\"profile--body--container\">\r\n          <div className=\"body--label\">Сведения</div>\r\n          <div className={`body--inputField${isDisableInfo ? ' active' : ''}`}>\r\n            <div className=\"inputField--input\">\r\n              <input\r\n                type=\"text\"\r\n                value={inputInfo}\r\n                onChange={(e) => setInputInfo(e.target.value)}\r\n                disabled={!isDisableInfo}\r\n              />\r\n            </div>\r\n            <div className=\"inputField--btn\">\r\n              <IconButton onClick={() => setIsDisableInfo(!isDisableInfo)}>\r\n                {isDisableInfo ? <CheckIcon /> : <CreateIcon />}\r\n              </IconButton>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setActiveId } from '../AC/activeIdAction'\r\nimport ChatListItem from './shared/ChatListItem'\r\nimport DropdownMenu from './shared/DropdownMenu'\r\nimport DropdownMenuItem from './shared/DropdownMenuItem'\r\nimport Profile from './Profile'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge'\r\nimport ChatIcon from '@material-ui/icons/Chat'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport './Sidebar.css'\r\n\r\nconst Sidebar = () => {\r\n  const dispatch = useDispatch()\r\n  const [isProfileOpen, setIsProfileOpen] = useState(false)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [filter, setFilter] = useState('')\r\n  const activeId = useSelector((state) => state.activeId)\r\n  const usersList = useSelector((state) => state.usersList.entities).filter(\r\n    (item) => item.userName.toLowerCase().indexOf(filter.toLowerCase()) > -1\r\n  )\r\n  const chatList = useSelector((state) => state.chatList.entities)\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"main_sidebar\">\r\n        <div className=\"main_sidebar--header\">\r\n          <Avatar onClick={() => setIsProfileOpen(true)} />\r\n          <div className=\"main_sidebar--header--buttons\">\r\n            <div className=\"header--btn\">\r\n              <IconButton>\r\n                <DonutLargeIcon />\r\n              </IconButton>\r\n            </div>\r\n\r\n            <div className=\"header--btn\">\r\n              <IconButton>\r\n                <ChatIcon />\r\n              </IconButton>\r\n            </div>\r\n\r\n            <div className=\"header--btn\">\r\n              <IconButton onClick={() => setIsOpen(!isOpen)}>\r\n                <MoreVertIcon />\r\n              </IconButton>\r\n              <DropdownMenu\r\n                isOpen={isOpen}\r\n                setIsOpen={setIsOpen}\r\n                onClick={() => setIsOpen(false)}\r\n              >\r\n                <DropdownMenuItem>Новая группа</DropdownMenuItem>\r\n                <DropdownMenuItem>Создать комнату</DropdownMenuItem>\r\n                <DropdownMenuItem onClick={() => setIsProfileOpen(true)}>\r\n                  Профиль\r\n                </DropdownMenuItem>\r\n                <DropdownMenuItem>Архив</DropdownMenuItem>\r\n                <DropdownMenuItem>Избранные</DropdownMenuItem>\r\n                <DropdownMenuItem>Настройки</DropdownMenuItem>\r\n                <DropdownMenuItem>Выйти</DropdownMenuItem>\r\n              </DropdownMenu>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"main_sidebar--search\">\r\n          <div className=\"search--container\">\r\n            <SearchIcon fontSize=\"small\" color=\"disabled\" />\r\n            <input\r\n              placeholder=\"Поиск или новый чат\"\r\n              value={filter}\r\n              onChange={(e) => setFilter(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"main_sidebar--userList\">\r\n          {chatList.valueSeq().map((item, i) => {\r\n            const user = usersList.find((obj) => obj.get('id') === item.userId)\r\n            return user ? (\r\n              <ChatListItem\r\n                user={user}\r\n                lastMessage={item.messages[item.messages.length - 1]}\r\n                key={i}\r\n                active={user.id === activeId}\r\n                onClick={() => dispatch(setActiveId(user.id))}\r\n              />\r\n            ) : (\r\n              ''\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n      <Profile isOpen={isProfileOpen} setIsOpen={setIsProfileOpen} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","import { SET_ACTIVE_ID } from '../constants'\r\n\r\nexport function setActiveId(activeId) {\r\n  return {\r\n    type: SET_ACTIVE_ID,\r\n    payload: { activeId }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport LaptopWindowsIcon from '@material-ui/icons/LaptopWindows'\r\nimport './ChatInfoWindow.css'\r\n\r\nfunction ChatInfoWindow() {\r\n  return (\r\n    <div className=\"ChatInfoWindow\">\r\n      <div className=\"ChatInfoWindow--content\">\r\n        <div className=\"ChatInfoWindow--content--img\" />\r\n        <h1>Не отключайте свой телефон</h1>\r\n        <div className=\"ChatInfoWindow--text\">\r\n          WhatsApp подключается к вашему телефону, чтобы синхронизировать\r\n          сообщения. Чтобы снизить трафик данных, подключите телефон к Wi-Fi.\r\n        </div>\r\n        <div className=\"ChatInfoWindow--link\">\r\n          <LaptopWindowsIcon />\r\n          <div>\r\n            WhatsApp доступен для Windows.{' '}\r\n            <a\r\n              href=\"https://www.whatsapp.com/download\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              Скачайте здесь\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatInfoWindow\r\n","import { OPEN_ABOUT_CONTACT, CLOSE_ABOUT_CONTACT } from '../constants'\r\n\r\nexport function openAboutContact() {\r\n  return {\r\n    type: OPEN_ABOUT_CONTACT,\r\n    payload: { openContact: true }\r\n  }\r\n}\r\n\r\nexport function closeAboutContact() {\r\n  return {\r\n    type: CLOSE_ABOUT_CONTACT,\r\n    payload: { openContact: false }\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { IconButton } from '@material-ui/core'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport { MY_UUID } from '../../constants'\r\nimport DropdownMenu from './DropdownMenu'\r\nimport DropdownMenuItem from './DropdownMenuItem'\r\nimport './MessageBox.css'\r\n\r\nfunction MessageBox({ message }) {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  return (\r\n    <div className=\"messageBox--line\">\r\n      <div\r\n        className={`messageBox--line--container${\r\n          message.author === MY_UUID ? ` out` : ``\r\n        }`}\r\n      >\r\n        <div className=\"container--wrapper\">\r\n          <div className=\"container--wrapper--message\">{message.message}</div>\r\n          <div className=\"container--wrapper--time\">{message.date}</div>\r\n        </div>\r\n        <div className=\"container--btn\">\r\n          <IconButton onClick={() => setIsOpen(!isOpen)}>\r\n            <ExpandMoreIcon />\r\n          </IconButton>\r\n          <DropdownMenu isOpen={isOpen} setIsOpen={setIsOpen}>\r\n            <DropdownMenuItem>Данные о сообщении</DropdownMenuItem>\r\n            <DropdownMenuItem>Ответить</DropdownMenuItem>\r\n            <DropdownMenuItem>Переслать сообщение</DropdownMenuItem>\r\n            <DropdownMenuItem>Добавить сообщение в Избранные</DropdownMenuItem>\r\n            <DropdownMenuItem>Удалить сообщение</DropdownMenuItem>\r\n          </DropdownMenu>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageBox\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setMessage } from '../AC/chatListAction'\r\nimport { openAboutContact } from '../AC/openContactAction'\r\nimport { Avatar, IconButton, TextareaAutosize } from '@material-ui/core'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport SearchIcon from '@material-ui/icons/Search'\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon'\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile'\r\nimport SendIcon from '@material-ui/icons/Send'\r\nimport MicIcon from '@material-ui/icons/Mic'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport GifIcon from '@material-ui/icons/Gif'\r\nimport NoteIcon from '@material-ui/icons/Note'\r\nimport MessageBox from './shared/MessageBox'\r\nimport { Picker } from 'emoji-mart'\r\nimport DropdownMenu from './shared/DropdownMenu'\r\nimport DropdownMenuItem from './shared/DropdownMenuItem'\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport './ChatWindow.css'\r\n\r\nconst ChatWindow = () => {\r\n  const messagesEndRef = useRef(null)\r\n  const [input, setInput] = useState('')\r\n  const [isOpenMenu, setIsOpenMenu] = useState(false)\r\n  const [emojiIsOpen, setEmojiIsOpen] = useState(false)\r\n  const dispatch = useDispatch()\r\n  const activeId = useSelector((state) => state.activeId)\r\n  const chatList = useSelector((state) => state.chatList.entities)\r\n  const messagesList = chatList.find((obj) => obj.get('userId') === activeId)\r\n\r\n  const user = useSelector((state) =>\r\n    state.usersList.getIn(['entities', activeId])\r\n  )\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView()\r\n  }\r\n\r\n  function handleClickKey(e) {\r\n    if (e.which === 13 && e.ctrlKey) {\r\n      setInput(e.target.value + '\\n')\r\n    } else if (e.which === 13) {\r\n      handleClickSend(e)\r\n    }\r\n  }\r\n\r\n  function handleClickSend(e) {\r\n    e.preventDefault()\r\n    if (input.length > 0) {\r\n      var date = new Date()\r\n      dispatch(\r\n        setMessage(\r\n          input,\r\n          activeId,\r\n          date.getHours() + ':' + ('0' + date.getMinutes()).slice(-2)\r\n        )\r\n      )\r\n      setInput('')\r\n    }\r\n  }\r\n\r\n  function handleClickEmojiOpen(e) {\r\n    e.preventDefault()\r\n    if (!emojiIsOpen) setEmojiIsOpen(true)\r\n  }\r\n\r\n  function handleClickClose(e) {\r\n    e.preventDefault()\r\n    setEmojiIsOpen(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    scrollToBottom()\r\n  })\r\n\r\n  return (\r\n    <div className=\"chatWindow\">\r\n      <header className=\"chatWindow--header\">\r\n        <div\r\n          className=\"header--tittle\"\r\n          onClick={() => dispatch(openAboutContact())}\r\n        >\r\n          <div className=\"header--avatar\">\r\n            <Avatar src={user.imgAvatar} />\r\n          </div>\r\n          <div className=\"header--container\">\r\n            <div className=\"header--container--name\">{user.userName}</div>\r\n            <div className=\"header--container--date\">Был в сети вчера</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"header--buttons\">\r\n          <div className=\"header--btn\">\r\n            <IconButton>\r\n              <SearchIcon />\r\n            </IconButton>\r\n          </div>\r\n          <div className=\"header--btn\">\r\n            <IconButton onClick={() => setIsOpenMenu(!isOpenMenu)}>\r\n              <MoreVertIcon />\r\n            </IconButton>\r\n            <DropdownMenu\r\n              isOpen={isOpenMenu}\r\n              setIsOpen={setIsOpenMenu}\r\n              onClick={() => setIsOpenMenu(false)}\r\n            >\r\n              <DropdownMenuItem onClick={() => dispatch(openAboutContact())}>\r\n                Данные контакта\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem>Выбрать сообщения</DropdownMenuItem>\r\n              <DropdownMenuItem>Без звука</DropdownMenuItem>\r\n              <DropdownMenuItem>Очистить чат</DropdownMenuItem>\r\n              <DropdownMenuItem>Удалить чат</DropdownMenuItem>\r\n            </DropdownMenu>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <div className=\"chatWindow--messageWindow\">\r\n        {messagesList.get('messages').map((item, index) => (\r\n          <MessageBox message={item} key={index} />\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className={`chatWindow--emojiField${!emojiIsOpen ? ' hidden' : ''}`}>\r\n        <Picker\r\n          showPreview={false}\r\n          showSkinTones={false}\r\n          emojiSize={32}\r\n          onSelect={(emoji) => setInput(input + emoji.native)}\r\n        />\r\n      </div>\r\n\r\n      <footer className=\"chatWindow--footer\">\r\n        <div className=\"footer--buttons\">\r\n          <IconButton\r\n            className={`${!emojiIsOpen ? 'hidden' : ''}`}\r\n            onClick={handleClickClose}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n\r\n          <IconButton onClick={handleClickEmojiOpen}>\r\n            <InsertEmoticonIcon\r\n              style={{ color: emojiIsOpen ? '#009688' : '#919191' }}\r\n            />\r\n          </IconButton>\r\n\r\n          <IconButton className={`${!emojiIsOpen ? 'hidden' : ''}`}>\r\n            <GifIcon />\r\n          </IconButton>\r\n\r\n          <IconButton className={`${!emojiIsOpen ? 'hidden' : ''}`}>\r\n            <NoteIcon />\r\n          </IconButton>\r\n\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n        </div>\r\n        <div className=\"footer--inputField\">\r\n          <TextareaAutosize\r\n            rowsMax={5}\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n            placeholder=\"Введите сообщение\"\r\n            onKeyPress={handleClickKey}\r\n          ></TextareaAutosize>\r\n        </div>\r\n        <div className=\"footer--sendButton\">\r\n          {input.length > 0 ? (\r\n            <IconButton onClick={handleClickSend}>\r\n              <SendIcon />\r\n            </IconButton>\r\n          ) : (\r\n            <IconButton>\r\n              <MicIcon />\r\n            </IconButton>\r\n          )}\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatWindow\r\n","import { SET_MESSAGE } from '../constants'\r\n\r\nexport function setMessage(message, userId, date) {\r\n  return {\r\n    type: SET_MESSAGE,\r\n    payload: { message, userId, date }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Avatar, IconButton } from '@material-ui/core'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos'\r\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown'\r\nimport BlockIcon from '@material-ui/icons/Block'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { closeAboutContact } from '../AC/openContactAction'\r\nimport './AboutContact.css'\r\n\r\nfunction AboutContact(props) {\r\n  const activeId = useSelector((state) => state.activeId)\r\n  const isOpen = useSelector((state) => state.openContact)\r\n  const user = useSelector((state) =>\r\n    state.usersList.getIn(['entities', activeId])\r\n  )\r\n  const dispatch = useDispatch()\r\n  return (\r\n    <CSSTransition\r\n      in={isOpen}\r\n      timeout={200}\r\n      classNames=\"about-contact\"\r\n      unmountOnExit\r\n      onExited={() => dispatch(closeAboutContact())}\r\n    >\r\n      <div className=\"about-contact\">\r\n        <div className=\"about-contact--header\">\r\n          <IconButton onClick={() => dispatch(closeAboutContact())}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n          <div className=\"header--info\">Данные контакта</div>\r\n        </div>\r\n\r\n        <div className=\"about-contact--body\">\r\n          <div className=\"body--wrapper\">\r\n            <div className=\"body--avatar\">\r\n              <Avatar src={user?.imgAvatar} />\r\n              <div className=\"avatar--name\">{user?.userName}</div>\r\n              <div className=\"avatar--date\">{user?.online}</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"body--wrapper\">\r\n            <div className=\"body--documents\">\r\n              <div className=\"documents--tittle\">\r\n                <div className=\"about-contact--tittle--text\">\r\n                  Медия, ссылки и документы\r\n                </div>\r\n                <div className=\"about-contact--btn\">\r\n                  <IconButton>\r\n                    <ArrowForwardIosIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                </div>\r\n              </div>\r\n              <div className=\"documents--content\">\r\n                Медия, ссылки и документы отсутствуют\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"body--wrapper\">\r\n            <div className=\"body--setting-messages\">\r\n              <div className=\"setting-messages--container\">\r\n                <div className=\"container--line\">\r\n                  <div className=\"container--line--text\">Без звука</div>\r\n                  <div className=\"about-contact--btn\">\r\n                    <Checkbox />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"setting-messages--container\">\r\n                <div\r\n                  className=\"container--line\"\r\n                  style={{\r\n                    borderTop: '1px solid #e5e5e6',\r\n                    borderBottom: '1px solid #e5e5e6'\r\n                  }}\r\n                >\r\n                  <div className=\"container--line--text\">\r\n                    Избранные сообщения\r\n                  </div>\r\n                  <div className=\"about-contact--btn\">\r\n                    <IconButton>\r\n                      <ArrowForwardIosIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"setting-messages--container\">\r\n                <div className=\"container--line\">\r\n                  <div className=\"container--line--text\">\r\n                    Исчезающие сообщения\r\n                  </div>\r\n                  <div className=\"about-contact--btn\">\r\n                    <IconButton>\r\n                      <ArrowForwardIosIcon fontSize=\"small\" />\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"body--wrapper\">\r\n            <div className=\"body--number\">\r\n              <div className=\"about-contact--tittle--text\">\r\n                Сведения и номер телефона\r\n              </div>\r\n              <div\r\n                className=\"container--line\"\r\n                style={{\r\n                  borderBottom: '1px solid #e5e5e6'\r\n                }}\r\n              >\r\n                <div className=\"container--line--text\">Hello, World!</div>\r\n              </div>\r\n              <div className=\"container--line\">\r\n                <div className=\"container--line--text\">{user?.phoneNum}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"body--button\">\r\n            <BlockIcon />\r\n            <div className=\"button--title\">Заблокировать</div>\r\n          </div>\r\n\r\n          <div className=\"body--button red\">\r\n            <ThumbDownIcon />\r\n            <div className=\"button--title\">Пожаловаться на контакт</div>\r\n          </div>\r\n\r\n          <div className=\"body--button red\">\r\n            <DeleteIcon />\r\n            <div className=\"button--title\">Удалить чат</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default AboutContact\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport ChatInfoWindow from './ChatInfoWindow'\r\nimport ChatWindow from './ChatWindow'\r\nimport AboutContact from './AboutContact'\r\nimport './MainWindow.css'\r\n\r\nfunction MainWindow() {\r\n  const activeId = useSelector((state) => state.activeId)\r\n  return (\r\n    <div className=\"main-window\">\r\n      {activeId ? <ChatWindow /> : <ChatInfoWindow />}\r\n      <AboutContact />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainWindow\r\n","import React from 'react'\nimport Sidebar from './components/Sidebar'\nimport MainWindow from './components/MainWindow'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App--wrapper\">\n        <div className=\"App--body\">\n          <Sidebar />\n          <MainWindow />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}